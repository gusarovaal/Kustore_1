const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
const ADD_PRODUCT_STATES = {
  WAITING_NAME: 'waiting_name',
  WAITING_PRICE: 'waiting_price',
  WAITING_SALE_PRICE: 'waiting_sale_price',
  WAITING_CATEGORY: 'waiting_category',
  WAITING_SUBCATEGORY: 'waiting_subcategory',
  WAITING_COLOR: 'waiting_color',
  WAITING_BRAND: 'waiting_brand',
  WAITING_DESCRIPTION: 'waiting_description',
  WAITING_SIZES: 'waiting_sizes',
  WAITING_STOCK: 'waiting_stock',
  WAITING_MEASUREMENTS: 'waiting_measurements',
  WAITING_IMAGES: 'waiting_images',
  WAITING_IS_NEW: 'waiting_is_new',
  WAITING_IS_ON_SALE: 'waiting_is_on_sale',
  CONFIRM: 'confirm'
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
const EDIT_PRODUCT_STATES = {
  WAITING_PRODUCT_ID: 'waiting_product_id',
  WAITING_FIELD: 'waiting_field',
  WAITING_VALUE: 'waiting_value'
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
const CATEGORIES = [
  'shirts', 'jeans', 'dresses', 'sweaters', 
  'jackets', 'skirts', 'bags', 'shoes', 'accessories'
];

// –†–∞–∑–º–µ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const SIZES_BY_CATEGORY = {
  'shirts': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'jeans': ['26', '27', '28', '29', '30', '31', '32', '33', '34', '36', '38'],
  'dresses': ['XS', 'S', 'M', 'L', 'XL'],
  'sweaters': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'jackets': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'skirts': ['XS', 'S', 'M', 'L', 'XL'],
  'bags': ['One Size'],
  'shoes': ['35', '36', '37', '38', '39', '40', '41', '42', '43', '44'],
  'accessories': ['One Size']
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(chatId) {
  return chatId.toString() === ADMIN_CHAT_ID;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'],
        ['üëÅÔ∏è –°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä', 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚ùå –û—Ç–º–µ–Ω–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getCategoryMenu() {
  const keyboard = [];
  for (let i = 0; i < CATEGORIES.length; i += 2) {
    const row = [CATEGORIES[i]];
    if (CATEGORIES[i + 1]) row.push(CATEGORIES[i + 1]);
    keyboard.push(row);
  }
  keyboard.push(['‚ùå –û—Ç–º–µ–Ω–∞']);
  
  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

// –ú–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getSizesMenu(category) {
  const sizes = SIZES_BY_CATEGORY[category] || ['XS', 'S', 'M', 'L', 'XL'];
  const keyboard = [];
  
  for (let i = 0; i < sizes.length; i += 3) {
    const row = sizes.slice(i, i + 3);
    keyboard.push(row);
  }
  keyboard.push(['‚úÖ –ì–æ—Ç–æ–≤–æ', '‚ùå –û—Ç–º–µ–Ω–∞']);
  
  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –ú–µ–Ω—é –¥–∞/–Ω–µ—Ç
function getYesNoMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!isAdmin(chatId)) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    return;
  }
  
  bot.sendMessage(chatId, 
    'üõçÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KUSTORE!*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { ...getMainMenu(), parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!isAdmin(chatId)) return;
  
  const userState = userStates.get(chatId) || {};
  
  try {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä') {
      await startAddProduct(chatId);
    } else if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä') {
      await startEditProduct(chatId);
    } else if (text === 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä') {
      await startHideProduct(chatId);
    } else if (text === 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤') {
      await showProductsList(chatId);
    } else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      await showStatistics(chatId);
    } else if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      userStates.delete(chatId);
      bot.sendMessage(chatId, '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', getMainMenu());
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'add_product') {
      await handleAddProductState(chatId, text, userState);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'edit_product') {
      await handleEditProductState(chatId, text, userState);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'hide_product') {
      await handleHideProductState(chatId, text, userState);
    }
  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    userStates.delete(chatId);
  }
});

// –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startAddProduct(chatId) {
  userStates.set(chatId, {
    action: 'add_product',
    state: ADD_PRODUCT_STATES.WAITING_NAME,
    product: {}
  });
  
  bot.sendMessage(chatId, 
    '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n' +
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleAddProductState(chatId, text, userState) {
  const { state, product } = userState;
  
  switch (state) {
    case ADD_PRODUCT_STATES.WAITING_NAME:
      product.name = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_PRICE;
      bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_PRICE:
      const price = parseFloat(text);
      if (isNaN(price) || price <= 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
        return;
      }
      product.price = price;
      userState.state = ADD_PRODUCT_STATES.WAITING_SALE_PRICE;
      bot.sendMessage(chatId, 
        'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç):'
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_SALE_PRICE:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        const salePrice = parseFloat(text);
        if (isNaN(salePrice) || salePrice <= 0) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –∏–ª–∏ "–Ω–µ—Ç":');
          return;
        }
        product.sale_price = salePrice;
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_CATEGORY;
      bot.sendMessage(chatId, 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', getCategoryMenu());
      break;
      
    case ADD_PRODUCT_STATES.WAITING_CATEGORY:
      if (!CATEGORIES.includes(text)) {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', getCategoryMenu());
        return;
      }
      product.category = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_SUBCATEGORY;
      bot.sendMessage(chatId, 
        'üìÅ –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫ateg–æ—Ä–∏—é (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞):'
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_SUBCATEGORY:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        product.subcategory = text;
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_COLOR;
      bot.sendMessage(chatId, 'üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ "–Ω–µ—Ç"):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_COLOR:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        product.color = text;
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_BRAND;
      bot.sendMessage(chatId, 'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "KUSTORE"):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_BRAND:
      product.brand = text === '–Ω–µ—Ç' ? 'KUSTORE' : text;
      userState.state = ADD_PRODUCT_STATES.WAITING_DESCRIPTION;
      bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_DESCRIPTION:
      product.description = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_SIZES;
      userState.selectedSizes = [];
      bot.sendMessage(chatId, 
        'üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã, –∑–∞—Ç–µ–º "–ì–æ—Ç–æ–≤–æ"):', 
        getSizesMenu(product.category)
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_SIZES:
      if (text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
        if (userState.selectedSizes.length === 0) {
          bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä!');
          return;
        }
        product.sizes = userState.selectedSizes;
        userState.state = ADD_PRODUCT_STATES.WAITING_STOCK;
        userState.stockIndex = 0;
        bot.sendMessage(chatId, 
          `üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.sizes[0]}:`
        );
      } else if (SIZES_BY_CATEGORY[product.category]?.includes(text)) {
        if (!userState.selectedSizes.includes(text)) {
          userState.selectedSizes.push(text);
          bot.sendMessage(chatId, `‚úÖ –†–∞–∑–º–µ—Ä ${text} –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±—Ä–∞–Ω–æ: ${userState.selectedSizes.join(', ')}`);
        }
      }
      break;
      
    case ADD_PRODUCT_STATES.WAITING_STOCK:
      const stock = parseInt(text);
      if (isNaN(stock) || stock < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ >= 0):');
        return;
      }
      
      if (!product.stock_quantity) product.stock_quantity = {};
      product.stock_quantity[product.sizes[userState.stockIndex]] = stock;
      
      userState.stockIndex++;
      if (userState.stockIndex < product.sizes.length) {
        bot.sendMessage(chatId, 
          `üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.sizes[userState.stockIndex]}:`
        );
      } else {
        userState.state = ADD_PRODUCT_STATES.WAITING_IMAGES;
        bot.sendMessage(chatId, 
          'üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n' +
          '–ü—Ä–∏–º–µ—Ä: /images/products/shirts/shirt1.jpg, /images/products/shirts/shirt2.jpg'
        );
      }
      break;
      
    case ADD_PRODUCT_STATES.WAITING_IMAGES:
      const imagePaths = text.split(',').map(path => path.trim());
      product.images = imagePaths;
      product.image_url = imagePaths[0]; // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
      product.image_alt_texts = imagePaths.map(() => product.name);
      
      userState.state = ADD_PRODUCT_STATES.WAITING_IS_NEW;
      bot.sendMessage(chatId, 'üÜï –≠—Ç–æ –Ω–æ–≤–∏–Ω–∫–∞?', getYesNoMenu());
      break;
      
    case ADD_PRODUCT_STATES.WAITING_IS_NEW:
      product.is_new = text === '‚úÖ –î–∞';
      userState.state = ADD_PRODUCT_STATES.WAITING_IS_ON_SALE;
      bot.sendMessage(chatId, 'üè∑Ô∏è –¢–æ–≤–∞—Ä —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ?', getYesNoMenu());
      break;
      
    case ADD_PRODUCT_STATES.WAITING_IS_ON_SALE:
      product.is_on_sale = text === '‚úÖ –î–∞';
      product.in_stock = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –Ω–∞–ª–∏—á–∏–∏
      
      userState.state = ADD_PRODUCT_STATES.CONFIRM;
      await showProductPreview(chatId, product);
      break;
      
    case ADD_PRODUCT_STATES.CONFIRM:
      if (text === '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
        await saveProduct(chatId, product);
      } else if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') {
        userStates.delete(chatId);
        bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getMainMenu());
      } else {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å".');
      }
      break;
  }
  
  userStates.set(chatId, userState);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞
async function showProductPreview(chatId, product) {
  const preview = `
üõçÔ∏è *–ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞:*

üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${product.name}
üí∞ *–¶–µ–Ω–∞:* ${product.price} —Ä—É–±.
${product.sale_price ? `üè∑Ô∏è *–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:* ${product.sale_price} —Ä—É–±.\n` : ''}
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category}
${product.subcategory ? `üìÅ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.subcategory}\n` : ''}
${product.color ? `üé® *–¶–≤–µ—Ç:* ${product.color}\n` : ''}
üè∑Ô∏è *–ë—Ä–µ–Ω–¥:* ${product.brand}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${product.description}
üìè *–†–∞–∑–º–µ—Ä—ã:* ${product.sizes.join(', ')}
üì¶ *–û—Å—Ç–∞—Ç–∫–∏:* ${Object.entries(product.stock_quantity).map(([size, qty]) => `${size}: ${qty}`).join(', ')}
üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* ${product.images.length} —à—Ç.
üÜï *–ù–æ–≤–∏–Ω–∫–∞:* ${product.is_new ? '–î–∞' : '–ù–µ—Ç'}
üè∑Ô∏è *–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞:* ${product.is_on_sale ? '–î–∞' : '–ù–µ—Ç'}
  `;
  
  bot.sendMessage(chatId, preview, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveProduct(chatId, product) {
  try {
    const { data, error } = await supabase
      .from('products')
      .insert([product])
      .select();
    
    if (error) throw error;
    
    userStates.delete(chatId);
    bot.sendMessage(chatId, 
      `‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
      `üÜî ID: ${data[0].id}\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`, 
      { ...getMainMenu(), parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error saving product:', error);
    bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}\n\n` +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    );
  }
}

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startEditProduct(chatId) {
  userStates.set(chatId, {
    action: 'edit_product',
    state: EDIT_PRODUCT_STATES.WAITING_PRODUCT_ID
  });
  
  bot.sendMessage(chatId, 
    '‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n' +
    'üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProductState(chatId, text, userState) {
  const { state } = userState;
  
  switch (state) {
    case EDIT_PRODUCT_STATES.WAITING_PRODUCT_ID:
      await findAndSelectProduct(chatId, text, userState);
      break;
      
    case EDIT_PRODUCT_STATES.WAITING_FIELD:
      await selectFieldToEdit(chatId, text, userState);
      break;
      
    case EDIT_PRODUCT_STATES.WAITING_VALUE:
      await updateProductField(chatId, text, userState);
      break;
  }
}

// –ù–∞–π—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function findAndSelectProduct(chatId, searchTerm, userState) {
  try {
    let query = supabase.from('products').select('*');
    
    // –ï—Å–ª–∏ —ç—Ç–æ UUID, –∏—â–µ–º –ø–æ ID
    if (searchTerm.length === 36 && searchTerm.includes('-')) {
      query = query.eq('id', searchTerm);
    } else {
      // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      query = query.ilike('name', `%${searchTerm}%`);
    }
    
    const { data, error } = await query.limit(10);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:');
      return;
    }
    
    if (data.length === 1) {
      userState.product = data[0];
      userState.state = EDIT_PRODUCT_STATES.WAITING_FIELD;
      await showEditMenu(chatId, data[0]);
    } else {
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      let message = 'üìã *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n';
      data.forEach((product, index) => {
        message += `${index + 1}. ${product.name} (${product.price} —Ä—É–±.)\n`;
        message += `   ID: \`${product.id}\`\n\n`;
      });
      message += '–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
      
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
    
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('Error finding product:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function showEditMenu(chatId, product) {
  const message = `
‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:*
üìù ${product.name}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
  `;
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['üìù –ù–∞–∑–≤–∞–Ω–∏–µ', 'üí∞ –¶–µ–Ω–∞'],
        ['üè∑Ô∏è –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π', 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
        ['üé® –¶–≤–µ—Ç', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'],
        ['üìè –†–∞–∑–º–µ—Ä—ã', 'üì¶ –û—Å—Ç–∞—Ç–∫–∏'],
        ['üÜï –ù–æ–≤–∏–Ω–∫–∞', 'üè∑Ô∏è –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞'],
        ['üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –í—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function selectFieldToEdit(chatId, fieldName, userState) {
  const fieldMap = {
    'üìù –ù–∞–∑–≤–∞–Ω–∏–µ': 'name',
    'üí∞ –¶–µ–Ω–∞': 'price',
    'üè∑Ô∏è –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π': 'sale_price',
    'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'category',
    'üé® –¶–≤–µ—Ç': 'color',
    'üìù –û–ø–∏—Å–∞–Ω–∏–µ': 'description',
    'üìè –†–∞–∑–º–µ—Ä—ã': 'sizes',
    'üì¶ –û—Å—Ç–∞—Ç–∫–∏': 'stock_quantity',
    'üÜï –ù–æ–≤–∏–Ω–∫–∞': 'is_new',
    'üè∑Ô∏è –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞': 'is_on_sale',
    'üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å': 'in_stock'
  };
  
  const field = fieldMap[fieldName];
  if (!field) {
    bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.');
    return;
  }
  
  userState.editField = field;
  userState.state = EDIT_PRODUCT_STATES.WAITING_VALUE;
  
  let prompt = '';
  const currentValue = userState.product[field];
  
  switch (field) {
    case 'name':
      prompt = `üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${currentValue}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`;
      break;
    case 'price':
      prompt = `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentValue} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:`;
      break;
    case 'sale_price':
      prompt = `üè∑Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${currentValue || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π (–∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å"):`;
      break;
    case 'category':
      prompt = `üìÇ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${currentValue}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;
      bot.sendMessage(chatId, prompt, getCategoryMenu());
      return;
    case 'color':
      prompt = `üé® –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: ${currentValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç:`;
      break;
    case 'description':
      prompt = `üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${currentValue}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`;
      break;
    case 'is_new':
    case 'is_on_sale':
    case 'in_stock':
      const labels = {
        'is_new': '–Ω–æ–≤–∏–Ω–∫–∞',
        'is_on_sale': '—É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ',
        'in_stock': '–Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ'
      };
      prompt = `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${labels[field]}): ${currentValue ? '–î–∞' : '–ù–µ—Ç'}\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞:`;
      bot.sendMessage(chatId, prompt, getYesNoMenu());
      return;
    default:
      prompt = `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ${fieldName}:`;
  }
  
  bot.sendMessage(chatId, prompt);
  userStates.set(chatId, userState);
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ —Ç–æ–≤–∞—Ä–∞
async function updateProductField(chatId, newValue, userState) {
  try {
    const { product, editField } = userState;
    let processedValue = newValue;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
    switch (editField) {
      case 'price':
        processedValue = parseFloat(newValue);
        if (isNaN(processedValue) || processedValue <= 0) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
          return;
        }
        break;
        
      case 'sale_price':
        if (newValue.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å') {
          processedValue = null;
        } else {
          processedValue = parseFloat(newValue);
          if (isNaN(processedValue) || processedValue <= 0) {
            bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å":');
            return;
          }
        }
        break;
        
      case 'is_new':
      case 'is_on_sale':
      case 'in_stock':
        processedValue = newValue === '‚úÖ –î–∞';
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
      .from('products')
      .update({ [editField]: processedValue })
      .eq('id', product.id);
    
    if (error) throw error;
    
    userStates.delete(chatId);
    bot.sendMessage(chatId, 
      `‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n` +
      `üìù –¢–æ–≤–∞—Ä: ${product.name}\n` +
      `üîÑ –ü–æ–ª–µ: ${editField}\n` +
      `‚ú® –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${processedValue}`, 
      { ...getMainMenu(), parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error updating product:', error);
    bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`
    );
  }
}

// –ù–∞—á–∞—Ç—å —Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startHideProduct(chatId) {
  userStates.set(chatId, {
    action: 'hide_product'
  });
  
  bot.sendMessage(chatId, 
    'üëÅÔ∏è *–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä*\n\n' +
    'üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleHideProductState(chatId, text, userState) {
  await findAndToggleProductVisibility(chatId, text);
}

// –ù–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
async function findAndToggleProductVisibility(chatId, searchTerm) {
  try {
    let query = supabase.from('products').select('*');
    
    if (searchTerm.length === 36 && searchTerm.includes('-')) {
      query = query.eq('id', searchTerm);
    } else {
      query = query.ilike('name', `%${searchTerm}%`);
    }
    
    const { data, error } = await query.limit(10);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    if (data.length === 1) {
      const product = data[0];
      const newStatus = !product.in_stock;
      
      const { error: updateError } = await supabase
        .from('products')
        .update({ in_stock: newStatus })
        .eq('id', product.id);
      
      if (updateError) throw updateError;
      
      userStates.delete(chatId);
      bot.sendMessage(chatId, 
        `‚úÖ *–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!*\n\n` +
        `üìù –¢–æ–≤–∞—Ä: ${product.name}\n` +
        `üëÅÔ∏è –°—Ç–∞—Ç—É—Å: ${newStatus ? '–ü–æ–∫–∞–∑–∞–Ω' : '–°–∫—Ä—ã—Ç'}`, 
        { ...getMainMenu(), parse_mode: 'Markdown' }
      );
    } else {
      let message = 'üìã *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n';
      data.forEach((product, index) => {
        const status = product.in_stock ? 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞–Ω' : 'üôà –°–∫—Ä—ã—Ç';
        message += `${index + 1}. ${product.name} - ${status}\n`;
        message += `   ID: \`${product.id}\`\n\n`;
      });
      message += '–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:';
      
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error('Error toggling product visibility:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
async function showProductsList(chatId) {
  try {
    const { data, error } = await supabase
      .from('products')
      .select('id, name, price, category, in_stock')
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, 'üìã –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    let message = 'üìã *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):*\n\n';
    data.forEach((product, index) => {
      const status = product.in_stock ? '‚úÖ' : '‚ùå';
      message += `${index + 1}. ${status} ${product.name}\n`;
      message += `   üí∞ ${product.price} —Ä—É–±. | üìÇ ${product.category}\n`;
      message += `   üÜî \`${product.id}\`\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error fetching products list:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function showStatistics(chatId) {
  try {
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*');
    
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('*');
    
    if (productsError) throw productsError;
    if (ordersError) throw ordersError;
    
    const totalProducts = products.length;
    const visibleProducts = products.filter(p => p.in_stock).length;
    const newProducts = products.filter(p => p.is_new).length;
    const saleProducts = products.filter(p => p.is_on_sale).length;
    
    const totalOrders = orders.length;
    const newOrders = orders.filter(o => o.status === 'new').length;
    const completedOrders = orders.filter(o => o.status === 'delivered').length;
    
    const totalRevenue = orders
      .filter(o => o.status === 'delivered')
      .reduce((sum, order) => sum + parseFloat(order.total_amount), 0);
    
    const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:*

üõçÔ∏è *–¢–æ–≤–∞—Ä—ã:*
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}
‚Ä¢ –í–∏–¥–∏–º—ã—Ö: ${visibleProducts}
‚Ä¢ –ù–æ–≤–∏–Ω–æ–∫: ${newProducts}
‚Ä¢ –í —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ: ${saleProducts}

üì¶ *–ó–∞–∫–∞–∑—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}
‚Ä¢ –ù–æ–≤—ã—Ö: ${newOrders}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}

üí∞ *–í—ã—Ä—É—á–∫–∞:*
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue.toFixed(2)} —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${totalOrders > 0 ? (totalRevenue / totalOrders).toFixed(2) : 0} —Ä—É–±.
    `;
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error fetching statistics:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

console.log('ü§ñ Telegram Admin Bot –∑–∞–ø—É—â–µ–Ω!');